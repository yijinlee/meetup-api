{
  "name": "Meetup",
  "apiVersion": 3,
  "description": "Meetup API v3 methods",
  "operations": {
    "ReportGroup": {
      "version": "3",
      "name": "ReportGroup",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comments": {
          "location": "query",
          "required": false,
          "description": "An optional string of text that describes why you are submitting this report"
        },
        "type": {
          "location": "query",
          "required": true,
          "description": "A required identifier for type of abuse you are reporting. Acceptable values include dangerous, graphic_content, graphic_photo, harmful_activities, inappropriate:illegal, inappropriate:intellectual_property, inappropriate:licensed_services, inappropriate:misinformation, inappropriate:other, inappropriate:sexual_exploitation, inappropriate:sexually_explicit, inappropriate:underage, irl:hateful, irl:misrepresentation, irl:other, irl:violent, licensed_services, not_accurate, not_community, not_irl, nudity, other, poor_quality_or_spam:misinformation, poor_quality_or_spam:misleading_title, poor_quality_or_spam:no_description, poor_quality_or_spam:not_irl, poor_quality_or_spam:other, poor_quality_or_spam:spam, promotion_focus, sex, smyte_warn, transactional, violence, violent_or_hateful:hateful, violent_or_hateful:misinformation, violent_or_hateful:other, violent_or_hateful:violent"
        }
      },
      "summary": "Submits a new abuse report for a target group. Abuse reports will be followed up on by our Community Support team.",
      "uri": "{urlname}/abuse_reports",
      "notes": "This method requires the oauth reporting scope for oauth-authenticated requests"
    },
    "ReportEvent": {
      "version": "3",
      "name": "ReportEvent",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comments": {
          "location": "query",
          "required": false,
          "description": "An optional string of text that describes why you are submitting this report"
        },
        "type": {
          "location": "query",
          "required": true,
          "description": "A required identifier for type of abuse you are reporting. Acceptable values include violent_or_hateful:violent, violent_or_hateful:hateful, violent_or_hateful:misinformation, violent_or_hateful:other, inappropriate:sexually_explicit, inappropriate:misinformation, inappropriate:sexual_exploitation, inappropriate:licensed_services, inappropriate:underage, inappropriate:illegal, inappropriate:intellectual_property, inappropriate:other, poor_quality_or_spam:spam, poor_quality_or_spam:misleading_title, poor_quality_or_spam:misinformation, poor_quality_or_spam:not_irl, poor_quality_or_spam:no_description, poor_quality_or_spam:other, irl:hateful, irl:violent, irl:misrepresentation, irl:no_host, irl:other"
        }
      },
      "summary": "Submits a new abuse report for a target event. Abuse reports will be followed up on by our Community Support team.",
      "uri": "{urlname}/events/{event_id}/abuse_reports",
      "notes": "This method requires the oauth reporting scope for oauth-authenticated requests"
    },
    "ReportAbuse": {
      "version": "3",
      "name": "ReportAbuse",
      "httpMethod": "POST",
      "parameters": {
        "comments": {
          "location": "query",
          "required": false,
          "description": "An optional string of text that describes why you are submitting this report"
        },
        "content_tag": {
          "location": "query",
          "required": false,
          "description": "An optional identifier for flagged content that identifies both the type and id, where possible, of the content reported. The type and id should be separated by a ':' character, e.g event_comment:{event_comment_id}. Valid content_tag types include conversation, conversation_message, convo, custom_list, email, event_comment, event_photo, group, mailing_list, member_photo, member_profile, message_board, pro_megaphone, reply, service_group_communication, service_group_communication_message. If member_id is not provided, content_tag should be provided to imply member_id"
        },
        "member_id": {
          "location": "query",
          "required": false,
          "description": "A numeric identifier for the member being reported. If not provided, this will be infered by the author of the content associated with the provided content_tag"
        },
        "type": {
          "location": "query",
          "required": true,
          "description": "A required identifier for type of abuse you are reporting. Acceptable values include general:underage, general:misrepresentation, general:sexually_explicit, general:hateful, general:violent, general:spam, general:intellectual_property, general:other, message:sexually_explicit, message:hateful, message:violent, message:misinformation, message:spam, message:other, photo:sexually_explicit, photo:hateful, photo:violent, photo:misleading_title, photo:intellectual_property, irl:misrepresentation, irl:hateful, irl:violent, irl:other, abuse, cron, dangerous, dislike_photo, fake, graphic_content, graphic_photo, impersonation, inappropriate, inappropriate_photo, join, licensed_services, offsite, not_accurate, not_irl, other, photo, sex, spam, transactional, underage, pay_dispute, nudity, violence, harmful_activities, not_community, promotion_focus"
        },
        "url": {
          "location": "query",
          "required": false,
          "description": "An optional URL for the location of the reported content if one exists"
        }
      },
      "summary": "Submits a new abuse report for a target member. Abuse reports will be followed up on by our Community Support team.",
      "uri": "self/abuse_reports",
      "notes": "This method requires the oauth reporting scope for oauth-authenticated requests"
    },
    "Blockstatus": {
      "version": "3",
      "name": "Blockstatus",
      "httpMethod": "GET",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Checks the block status for a target member relative to the authenticated member",
      "uri": "self/blocks/{member_id}",
      "notes": null
    },
    "Blockmember": {
      "version": "3",
      "name": "Blockmember",
      "httpMethod": "POST",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comments": {
          "location": "query",
          "required": false,
          "description": "An optional string of text describing why you have chosen to block this member"
        },
        "report": {
          "location": "query",
          "required": false,
          "description": "An optional value that represents a type of abuse the target member is being blocked for. Acceptable values include one of the following: fake, impersonation, inappropriate_photo, offsite, underage"
        }
      },
      "summary": "Blocks a target member from various interactions with the authenticated member on the platform",
      "uri": "self/blocks/{member_id}",
      "notes": null
    },
    "Unblockmember": {
      "version": "3",
      "name": "Unblockmember",
      "httpMethod": "DELETE",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Unblocks a previously blocked member from various interactions with the authenticated member on the platform",
      "uri": "self/blocks/{member_id}",
      "notes": null
    },
    "batch": {
      "version": "3",
      "name": "batch",
      "httpMethod": "POST",
      "parameters": {
        "requests": {
          "location": "query",
          "required": true,
          "description": "JSON-encoding of multiple request objects as described in the parameter notes"
        }
      },
      "summary": "Performs multiple API requests in batch, useful for reducing HTTP network requests. This method is only available for OAuth authentication",
      "uri": "batch",
      "notes": "You may supply a limited number of API requests, typically 1 to 4, in one batch request using the required \"requests\" parameter.  Each of these individual batched requests will be tallied separately the same way they would when making individual requests.  The batch request itself will not be tallied. As such, batch requests can not be rate limited.  The only failures that you should account for are an authentication failure or a malformed JSON encoding of requests provided with the \"requests\" parameter. Composing batch requests Requests should be provided within a JSON-encoded array in the following format attached the requests parameter  within a POST body   [{    \"path\": \"/2/member/self\",    \"ref\":  \"me\",    \"params\": {      \"only\": \"name,id\"    }  }]  Only \"path\" is required for HTTP GET requests. \"path\" represents the API path for the method. \"ref\" provides a way to tag a request in a batch  with a label that you can associated with its response in the body of the batch response. This will default to the  provided \"path\". You may also supply a \"params\" key with a JSON object representing the parameters provided for the  request. At this time only HTTP GET, DELETE, and POST requests are supported. You may specify one of these as a \"method\" property of the request.  Methods requiring a multipart form POST are currently not supported. You may also supply headers on a per request basis by adding a \"headers\" field to the  JSON object representing the request as key value pairs of strings. Interpreting batch responses A response to a batch request will be in the format   [{    \"path\": \"/2/member/self\"    \"status\": 200,    \"ref\": \"me\",    \"body\": {      \"id\": 1234,      \"name\": \"Noah\"    },    \"headers\": {      \"key\": \"value\"     }  }]  \"path\" is the path of the method invoked. \"status\" represents the HTTP status code returned for the request.  \"ref\" is the name provided for the inbound request. \"body\" is the JSON-encoded response from the given API request.  \"headers\" is a JSON-encoded object representing the headers returned for that request.  These requests may fail the same way they would when making individual requests. The response will indicate these  failures. In order to preserve server resources and return batch responses within a reasonable amount of time, individual requests may timeout  if a response is not computed within a reasonable amount of time. This allows for some requests to fail and others to pass which is a nicer  alternative to an all or nothing response timeout.  A timed out request can be identified by inspecting its response's \"status\" field for a value of 504. A timed out response may look like.   [{    \"status\" : 504,    \"body\" : {     \"errors\" : [{\"code\": \"request_timeout\", \"message\":\"request timed out\"}]    },    \"headers\" : { ... },    \"path\" : \"/end/point\",    \"ref\" : \"request_ref\"  }] "
    },
    "DiscussionBoards": {
      "version": "3",
      "name": "DiscussionBoards",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Listings of Group discussion boards",
      "uri": "{urlname}/boards",
      "notes": "The :urlname path element may be any valid group urlname or domain name"
    },
    "Discussions": {
      "version": "3",
      "name": "Discussions",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "bid": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "last_post_date": {
          "location": "query",
          "required": false,
          "description": "(default) by post date"
        },
        "member_name": {
          "location": "query",
          "required": false,
          "description": "by posting member's name"
        },
        "thread_reply_count": {
          "location": "query",
          "required": false,
          "description": "by the threads reply count"
        },
        "thread_view_count": {
          "location": "query",
          "required": false,
          "description": "by the number of views a thread has"
        }
      },
      "summary": "Listings of group discussions",
      "uri": "{urlname}/boards/{bid}/discussions",
      "notes": "The :urlname path element may be any valid group urlname or domain name. The :bid path element may be any valid board ID for this group."
    },
    "DiscussionPosts": {
      "version": "3",
      "name": "DiscussionPosts",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "bid": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "did": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Listing Group discussion posts",
      "uri": "{urlname}/boards/{bid}/discussions/{did}",
      "notes": "The :urlname path element may be any valid group urlname or domain name. The :bid path element maybe any valid board ID for this group. The :did may be any valid discussion ID for this board"
    },
    "EventCommentsList": {
      "version": "3",
      "name": "EventCommentsList",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response. Currently only \"self\" is supported"
        }
      },
      "summary": "Lists the comments and replies posted in a given Meetup Event.To view the list of likes for a comment or replysee the likesendpoint",
      "uri": "{urlname}/events/{event_id}/comments",
      "notes": null
    },
    "Eventcommentandreply": {
      "version": "3",
      "name": "Eventcommentandreply",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment": {
          "location": "query",
          "required": true,
          "description": "The text of the comment in at most 1024 characters"
        },
        "in_reply_to": {
          "location": "query",
          "required": false,
          "description": "If posting a reply, set this to the numeric identifier of the associated top level comment"
        },
        "notifications": {
          "location": "query",
          "required": false,
          "description": "A boolean value indicating whether or not you wish to recieve future notifications about updates to this comment thread"
        }
      },
      "summary": "Creates new comments and replies to existing comments within an Meetup event",
      "uri": "{urlname}/events/{event_id}/comments",
      "notes": null
    },
    "Eventcommentdelete": {
      "version": "3",
      "name": "Eventcommentdelete",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Deletes comments posted in events",
      "uri": "{urlname}/events/{event_id}/comments/{comment_id}",
      "notes": null
    },
    "EventCommentandReplyLikes": {
      "version": "3",
      "name": "EventCommentandReplyLikes",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Returns lists of likes for an event comment or reply",
      "uri": "{urlname}/events/{event_id}/comments/{comment_id}/likes",
      "notes": null
    },
    "EventCommentLike": {
      "version": "3",
      "name": "EventCommentLike",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Like a given event comment",
      "uri": "{urlname}/events/{event_id}/comments/{comment_id}/likes",
      "notes": null
    },
    "EventCommentUnlike": {
      "version": "3",
      "name": "EventCommentUnlike",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Unlike a given event comment",
      "uri": "{urlname}/events/{event_id}/comments/{comment_id}/likes",
      "notes": null
    },
    "GroupEvents": {
      "version": "3",
      "name": "GroupEvents",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "When true, sorts results in descending order. Defaults to false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of optional field names to append to the response."
        },
        "has_ended": {
          "location": "query",
          "required": false,
          "description": "An optional boolean which returns events which have ended when true. When false, returns events which are ongoing or upcoming. Defaults to empty/none. If requested with no_earlier_than, no_later_than, and/or scroll, it returns the subset of events that would be returned when a request is made with those parameters, that also meets the criterion specified by has_ended. i.e. if scroll requests events that start in the future and has_ended is true, then returns an empty result set; if scroll requests events that start in the past and common.events.HasEnded is false, then returns events that started before now but have not yet ended."
        },
        "no_earlier_than": {
          "location": "query",
          "required": false,
          "description": "An optional timestamp that represents a lower time bound (inclusive) for the start time of events in the local time of the group. If provided, it must be a string in ISO 8601 format without a time zone specified, i.e. 2018-06-01T00:00:00.000. If provided, the API will not return events with a start time earlier than the time specified by this parameter. If both this parameter and scroll are present, such that scroll does not have a type of ctime and it requests events that start after the specified scroll time, then the API returns events after whichever of scroll and no_earlier_than comes later."
        },
        "no_later_than": {
          "location": "query",
          "required": false,
          "description": "An optional timestamp that represents an upper time bound (exclusive) for the start time of events in the local time of the group. If provided, it must be a string in ISO 8601 format without a time zone specified, i.e. 2018-06-01T00:00:00.000. If provided, the API will not return events with a start time later than or equal to the time specified by this parameter. If both this parameter and scroll are present, such that scroll does not have a type of ctime and it requests events before the specified scroll time, then the API returns events before whichever of scroll and no_later_than comes earlier."
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of results to return in a page. Must be an integer greater than or equal to 1. Defaults to 200"
        },
        "scroll": {
          "location": "query",
          "required": false,
          "description": "A string representing an alias for a point on a timeline."
        },
        "status": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of event statuses. Valid values are: \"cancelled\", \"draft\", \"past\", \"proposed\", \"suggested\", or \"upcoming\". Events with \"draft\" status may be accessed by the group's organizers; guest event hosts may access only the drafts of events they host. The \"draft\" status may not be requested with other status values. The status value defaults to \"upcoming\" unless a scroll parameter is provided. If more than one status is requested, events with \"proposed\" status are returned last."
        }
      },
      "summary": "Gets a listing of all Meetup Events hosted by a target group, in ascending order by default",
      "uri": "{urlname}/events",
      "notes": null
    },
    "CreateEvent": {
      "version": "3",
      "name": "CreateEvent",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "announce": {
          "location": "query",
          "required": false,
          "description": "Boolean value indicating whether or not Meetup should announce this event to group members. This defaults to false."
        },
        "description": {
          "location": "query",
          "required": false,
          "description": "String setting the description of the event, in simple HTML format. May not be longer than 50000 characters."
        },
        "duration": {
          "location": "query",
          "required": false,
          "description": "Positive long representing event duration in milliseconds. This defaults to 10800000 (3 hours)."
        },
        "event_hosts": {
          "location": "query",
          "required": false,
          "description": "String containing up to 5 comma-separated valid member ids for members who will be hosts of the event. This defaults to the authenticated member when self_rsvp is true or undefined."
        },
        "featured_photo_id": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing a numeric identifier for a photo, which must be one associated with this group. When undefined or 0, no photo is set."
        },
        "fee.accepts": {
          "location": "query",
          "required": false,
          "description": "String representing the payment method for the event fee if a fee is charged for the event. May be one of: stripe,wepay,paypal,none,cash"
        },
        "fee.amount": {
          "location": "query",
          "required": false,
          "description": "Positive decimal representing the amount of the event fee if a fee is charged for the event. If the group is in the United States, this may not exceed 4999 (for any currency). Otherwise, this may not exceed 1000000 (for any currency). If the event fee is charged with WePay, this must be at least 1.0 USD"
        },
        "fee.currency": {
          "location": "query",
          "required": false,
          "description": "String representing the currency for the event fee if a fee is charged for the event. May be one of: AUD,BRL,CAD,CHF,EUR,GBP,INR,JPY,KRW,PLN,RUB,THB,TRY,USD"
        },
        "fee.refund_policy": {
          "location": "query",
          "required": false,
          "description": "String setting the refund policy if the event has a fee. May not be longer than 250 characters."
        },
        "guest_limit": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing the number of guests that members may include in their RSVP, 0 inclusive. This defaults to 2."
        },
        "how_to_find_us": {
          "location": "query",
          "required": false,
          "description": "String setting the description for the location of the host(s) at the event venue."
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Float representing adjusted venue latitude. This can only be set if lon is included as well."
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Float representing adjusted venue longitude. This can only be set if lat is included as well."
        },
        "name": {
          "location": "query",
          "required": true,
          "description": "String setting the name of the event. Must be at least 1 character and may not be longer than 80 characters."
        },
        "publish_status": {
          "location": "query",
          "required": false,
          "description": "String indicating whether an event will be published to the group or as a draft visible only to the leadership team. May be one of \"draft\" or \"published\". This defaults to \"published\"."
        },
        "question": {
          "location": "query",
          "required": false,
          "description": "String setting the RSVP survey question for the event. May not be longer than 250 characters."
        },
        "rsvp_close_time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing the time before which members will be allowed to RSVP to the event in milliseconds since the epoch. This can only be set if there is a start time for the event. This defaults to no RSVP close time restriction."
        },
        "rsvp_limit": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing total number of RSVP slots available for the event. When undefined or defined as 0, there will be no set limit."
        },
        "rsvp_open_time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing the time after which members will be allowed to RSVP to the event in milliseconds since the epoch. This can only be set if there is a start time for the event. This defaults to no RSVP open time restriction."
        },
        "self_rsvp": {
          "location": "query",
          "required": false,
          "description": "Boolean value indicating whether the authenticated member will be RSVP'd to the event upon creation. This defaults to true."
        },
        "time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing event start time in milliseconds since the epoch."
        },
        "venue_id": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing a numeric identifier for a venue."
        },
        "venue_visibility": {
          "location": "query",
          "required": false,
          "description": "String indicating whether the event venue and host location description will be visible to non-members of the hosting group. May be one of \"public\" or \"members\". This defaults to \"public\"."
        }
      },
      "summary": "Creates a new Meetup group event",
      "uri": "{urlname}/events",
      "notes": null
    },
    "CloseRsvps": {
      "version": "3",
      "name": "CloseRsvps",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Closes rsvps for an event",
      "uri": "{urlname}/events/{event_id}/rsvps/close",
      "notes": "Valid path parameters for :urlname and :event_id are required. Only event hosts and members of the lead team may close rsvps. OAuth authenticated applications should request the event_management OAuth scope."
    },
    "OpenRsvps": {
      "version": "3",
      "name": "OpenRsvps",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Opens rsvps for an event",
      "uri": "{urlname}/events/{event_id}/rsvps/open",
      "notes": "Valid path parameters for :urlname and :event_id are required. Only event hosts and members of the lead team may open rsvps. OAuth authenticated applications should request the event_management OAuth scope."
    },
    "GetEvent": {
      "version": "3",
      "name": "GetEvent",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        }
      },
      "summary": "Fetches a Meetup Event by group urlname and event_id",
      "uri": "{urlname}/events/{id}",
      "notes": null
    },
    "UpdateEvent": {
      "version": "3",
      "name": "UpdateEvent",
      "httpMethod": "PATCH",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "announce": {
          "location": "query",
          "required": false,
          "description": "Boolean value indicating whether or not Meetup should announce this event to group members. This defaults to false."
        },
        "description": {
          "location": "query",
          "required": false,
          "description": "String setting the description of the event, in simple HTML format. May not be longer than 50000 characters. Use an empty string to remove the existing description."
        },
        "duration": {
          "location": "query",
          "required": false,
          "description": "Positive long representing event duration in milliseconds. Use 0 to remove existing duration."
        },
        "event_hosts": {
          "location": "query",
          "required": false,
          "description": "String containing up to 5 comma-separated valid member ids for members who will be hosts of the event."
        },
        "featured_photo_id": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing a numeric identifier for a photo, which must be one associated with this group. Use 0 to remove the existing photo."
        },
        "guest_limit": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing the number of guests that members may include in their RSVP, 0 inclusive. Previously RSVP'd guests will remain unaffected if the value is reduced."
        },
        "how_to_find_us": {
          "location": "query",
          "required": false,
          "description": "String setting the description for the location of the host(s) at the event venue. Use an empty string to remove the existing description."
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Float representing adjusted venue latitude. This can only be set if lon is included as well."
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Float representing adjusted venue longitude. This can only be set if lat is included as well."
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "String setting the name of the event. Must be at least 1 character and may not be longer than 80 characters."
        },
        "publish_status": {
          "location": "query",
          "required": false,
          "description": "String indicating whether an event will be published to the group or as a draft visible only to the leadership team. If editing a draft event, \"published\" will publish the event. That is the only valid use of this field when editing an event."
        },
        "question": {
          "location": "query",
          "required": false,
          "description": "String setting or replacing the RSVP survey question for the event. May not be longer than 250 characters. Use an empty string to remove the existing question."
        },
        "rsvp_close_time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing the time before which members will be allowed to RSVP to the event in milliseconds since the epoch. Use 0 to remove the existing RSVP close time restriction. This can only be set if there is a start time for the event."
        },
        "rsvp_limit": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing total number of RSVP slots available for the event. Use 0 to remove existing limit. Previously RSVP'd guests will remain unaffected if the value is reduced."
        },
        "rsvp_open_time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing the time after which members will be allowed to RSVP to the event in milliseconds since the epoch. Use 0 to remove the existing RSVP open time restriction. This can only be set if there is a start time for the event."
        },
        "time": {
          "location": "query",
          "required": false,
          "description": "Positive long representing event start time in milliseconds since the epoch."
        },
        "venue_id": {
          "location": "query",
          "required": false,
          "description": "Positive integer representing a numeric identifier for a venue. Use 0 to remove existing venue. This will override any latitude/longitude values that have previously been set."
        },
        "venue_visibility": {
          "location": "query",
          "required": false,
          "description": "String indicating whether the event venue and host location description will be visible to non-members of the hosting group. May be one of \"public\" or \"members\"."
        }
      },
      "summary": "Updates an existing Meetup group event's details",
      "uri": "{urlname}/events/{id}",
      "notes": null
    },
    "EventDelete": {
      "version": "3",
      "name": "EventDelete",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "remove_from_calendar": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that, when set to true, fully deletes the event. If set to false, this operation cancels the event instead of completely removing it from the group's calendar. This defaults to true when not set explicitly."
        },
        "update_series": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that, when set to true, will update all future recurrences of this event if this event belongs to an event series. Requesting this for an event that doesn't belong to an active series will result in an error. You can detect an event's association with a series by sending fields=series when requesting event data. This defaults to false, when not set explicitly"
        }
      },
      "summary": "Cancels or removes an event from a groups calendar",
      "uri": "{urlname}/events/{id}",
      "notes": null
    },
    "Attendance": {
      "version": "3",
      "name": "Attendance",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Boolean value controlling sort order of results. Defaults to false"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "The sort order of returned attendees.  The attendees are sorted in ascending order, use 'desc' to sort in descending order instead.  Valid values include \"name\", \"social\", or \"time\".  'name' sorts alphabetically using the member's name. Attendees with no name will be moved to the bottom of the list, regardless of the value of 'desc'.  'time' sorts using either the rsvp response time or the time the attendance was taken. If an attendee has both an rsvp status and attendance status we always use the time the attendance status was changed in the sort over the rsvp response time. Attendees with no rsvp response time or attendance time will be moved to the bottom of the list regardless of the 'desc' value.  'social' sorts the attendees by the amount of friends and groups that they have in common with the authenticated member. If there is no authenticated member we default to 'name'.  Default sort is: name."
        }
      },
      "summary": "Lists attendance records for Meetup events. Getting the list of attendance records for private groups is limited only to members of that group. The endpoint returns all members that have rsvped 'yes' or 'no' and members that were marked as either 'attended', 'noshow', or 'absent'",
      "uri": "{urlname}/events/{id}/attendance",
      "notes": null
    },
    "AttendanceTaking": {
      "version": "3",
      "name": "AttendanceTaking",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "guests": {
          "location": "query",
          "required": false,
          "description": "The number of guests accompanying member. Maximum of guests allowed is 99. If the field is empty the guest count is either populated using the rsvp guest count or the guest count from the existing attendance status for the corresponding member. If no guest count is found it defaults to 0."
        },
        "member": {
          "location": "query",
          "required": true,
          "description": "MemberId of member we are taking attendance on"
        },
        "status": {
          "location": "query",
          "required": true,
          "description": "An attendance status for the provided members. Must be one of: noshow, absent, attended"
        }
      },
      "summary": "Takes member attendance for an event. Limited for use by administrative members.",
      "uri": "{urlname}/events/{id}/attendance",
      "notes": null
    },
    "EventPayments": {
      "version": "3",
      "name": "EventPayments",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "amount": {
          "location": "query",
          "required": true,
          "description": "The monetary amount of money the member submitted"
        },
        "member": {
          "location": "query",
          "required": true,
          "description": "Member Id of member who made a payment"
        },
        "paid_on": {
          "location": "query",
          "required": false,
          "description": "The time the payment was made in milliseconds from the epoc. Defaults to now"
        },
        "quantity": {
          "location": "query",
          "required": false,
          "description": "The number of payments made. Defaults to 1"
        }
      },
      "summary": "Allows organizers of a group to note payments made by members for an event. This is the 'Mark Paid' feature seen in the RSVP listings on event details pages and affects the 'pay_status' response fields in 2/rsvps for paid events",
      "uri": "{urlname}/events/{id}/payments",
      "notes": "Only organizer may submit payment information for members and only one payment may be submitted for a member for a given event"
    },
    "FindUpcomingEvents": {
      "version": "3",
      "name": "FindUpcomingEvents",
      "httpMethod": "GET",
      "parameters": {
        "end_date_range": {
          "location": "query",
          "required": false,
          "description": "Return events that start before this date. The date must follow this format: YYYY-MM-DDTHH:MM:SS."
        },
        "end_time_range": {
          "location": "query",
          "required": false,
          "description": "Return events that start before this time. The time must follow this format: HH:MM:SS. The time is exlusive. A start_time_range must also be present"
        },
        "excluded_groups": {
          "location": "query",
          "required": false,
          "description": "IDs for groups to exclude from the returned events. excluded_groups overrides the include and only values for self_groups. In other words, if excluded_groups is nonempty, then groups specified in excluded_groups will be excluded even if they are in the set of groups the authenticated member belongs to."
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to populate in the response"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Approximate target latitude"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Approximate target longitude"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "The sort order of returned events. Valid values include: 'best' and 'time'. 'best' orders events by recommendation score, while 'time' orders events by the by the event's start time in increasing order. Defaults to 'best'."
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "A target minimum number of events to return in a single page of results. The number returned is non-deterministic but a best-effort attempt will be made to return at least some. Defaults to 32"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
        },
        "self_groups": {
          "location": "query",
          "required": false,
          "description": "set to 'include' or 'exclude' or 'only' get groups that the member belongs to. Defaults to 'include.' When self_groups is set to only and the order is set to time, the following fields are disregarded: page, end_date_range, lat and lon."
        },
        "start_date_range": {
          "location": "query",
          "required": false,
          "description": "Return events that start after this date. The date must follow this format: YYYY-MM-DDTHH:MM:SS. It defaults to the current date and time."
        },
        "start_time_range": {
          "location": "query",
          "required": false,
          "description": "Return events that start after this time. The time must follow this format: HH:MM:SS. The time is inclusive. An end_time_range must also be present."
        },
        "text": {
          "location": "query",
          "required": false,
          "description": "Full text search query"
        },
        "topic_category": {
          "location": "query",
          "required": false,
          "description": "Numeric topic category identifier for filtering recommendations by a topic category"
        }
      },
      "summary": "Returns a list of upcoming events",
      "uri": "find/upcoming_events",
      "notes": "By default, the events returned will be based on the hosting groups near the authenticated member's location. To customize this location, send a valid \"lat\" and \"lon\" parameter combination reflecting a desired location. You may filter results using an topic category identifier from the Topic Categories API You may specify 'fields' to expand response events with corresponded fields"
    },
    "MemberCalendar": {
      "version": "3",
      "name": "MemberCalendar",
      "httpMethod": "GET",
      "parameters": {
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields names which may be appended to the response"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of results to return in a page. Defaults to 200"
        }
      },
      "summary": "Get a listing of all upcoming Meetup events for the authenticated member",
      "uri": "self/calendar",
      "notes": null
    },
    "MemberEvents": {
      "version": "3",
      "name": "MemberEvents",
      "httpMethod": "GET",
      "parameters": {
        "desc": {
          "location": "query",
          "required": false,
          "description": "When true, sorts results in descending order. Defaults to false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields names which may be appended to the response"
        },
        "no_earlier_than": {
          "location": "query",
          "required": false,
          "description": "An optional timestamp that represents a lower time bound (inclusive) for the start time of events in the local time of the group. If provided, it must be a string in ISO 8601 format without a time zone specified, i.e. 2018-06-01T00:00:00.000. If provided, the API will not return events with a start time earlier than the time specified by this parameter. If both this parameter and scroll are present, such that scroll does not have a type of ctime and it requests events that start after the specified scroll time, then the API returns events after whichever of scroll and no_earlier_than comes later."
        },
        "no_later_than": {
          "location": "query",
          "required": false,
          "description": "An optional timestamp that represents an upper time bound (exclusive) for the start time of events in the local time of the group. If provided, it must be a string in ISO 8601 format without a time zone specified, i.e. 2018-06-01T00:00:00.000. If provided, the API will not return events with a start time later than or equal to the time specified by this parameter. If both this parameter and scroll are present, such that scroll does not have a type of ctime and it requests events before the specified scroll time, then the API returns events before whichever of scroll and no_later_than comes earlier."
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of results to return. Defaults to 200."
        },
        "rsvp": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of RSVP responses. Valid values are \"waitlist\" or \"yes\". The default is \"yes\""
        },
        "scroll": {
          "location": "query",
          "required": false,
          "description": "A string representing an alias for a point on a timeline."
        },
        "status": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of event statuses. Valid values are \"past\" or \"upcoming\""
        }
      },
      "summary": "Gets a listing of all scheduled Meetup Events the authenticated member has RSVP'd tothat have been announced to the group.This listing is ordered from oldest to most recent by default",
      "uri": "self/events",
      "notes": "This endpoint uses HTTP Link header based pagination. Clients may use the scroll request parameter to jump to a target scroll location. Valid values for scroll targets are defined below. A 'page' parameter may be provided to control the number of results returned."
    },
    "Findlocations": {
      "version": "3",
      "name": "Findlocations",
      "httpMethod": "GET",
      "parameters": {
        "lat": {
          "location": "query",
          "required": false,
          "description": "Search for locations based on location latitude. Must be provided with \"lon\""
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Search for locations based on location longitude. Must be provided with \"lat\""
        },
        "offset": {
          "location": "query",
          "required": false,
          "description": "The current offset in the paginated set, represented as an incrementing value"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "The desired number of locations to return in a single set of results. Defaults to 200"
        },
        "query": {
          "location": "query",
          "required": false,
          "description": "Search for locations based on city name or zip code"
        }
      },
      "summary": "Provides a query interface for finding known locations",
      "uri": "find/locations",
      "notes": "This endpoint uses HTTP Link header based pagination."
    },
    "GetGroup": {
      "version": "3",
      "name": "GetGroup",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        }
      },
      "summary": "Fetches a Meetup group by urlname",
      "uri": "{urlname}",
      "notes": null
    },
    "GroupEdit": {
      "version": "3",
      "name": "GroupEdit",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "query",
          "required": false,
          "description": "Name used for the groups web address on meetup.com. Must be between 6 and 60 characters"
        },
        "add_topics": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of topic ids to associate with group"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "The ISO_3166-1 country code for the country which contains the city"
        },
        "description": {
          "location": "query",
          "required": false,
          "description": "Summary of what the Meetup group is about in simple HTML format"
        },
        "dryrun": {
          "location": "query",
          "required": false,
          "description": "Boolean parameter that will cause this endpoint to apply all validation rules without actually saving changes in which case the response will only reflect the group's current attributes"
        },
        "ga_code": {
          "location": "query",
          "required": false,
          "description": "Google Analytics code for group"
        },
        "join_mode": {
          "location": "query",
          "required": false,
          "description": "Controls how member's are let into the group. May be one of 'open' meaning any Meetup member my join, 'closed' meaning group is not currently accepting new members, or 'approval' meaning members must be approved by an organizer. Note, the 'closed' options is only available to groups that already have a 'closed' join_mode"
        },
        "key_photo": {
          "location": "query",
          "required": false,
          "description": "Group's primary photo. Must be ID of an existing album photo"
        },
        "list_addr": {
          "location": "query",
          "required": false,
          "description": "Mailing list prefix. By default this is the group's urlname."
        },
        "list_mode": {
          "location": "query",
          "required": false,
          "description": "Defines policy for who can post to the group mailing list. May be one of 'open' meaning any member can post, 'off' meaning no one can post, 'moderated' meaning messages must be approved, or 'orgs_only' meaning only organizers may post to the list"
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "Display name of the group. Can be at most 60 characters"
        },
        "photo_req": {
          "location": "query",
          "required": false,
          "description": "Indicates that a member must provide a photo before joining. Expects true or false values"
        },
        "question_edit_{id}": {
          "location": "query",
          "required": false,
          "description": "Edits a current profile question identified by an id in the parameter name. The index updated index should also be encoded in the parameter name. To delete a question, set this to an empty string. Groups that require profile questions must have at least one question"
        },
        "question_{index}": {
          "location": "query",
          "required": false,
          "description": "A new profile question defined in the order of index provided in the request parameter name"
        },
        "questions_req": {
          "location": "query",
          "required": false,
          "description": "Indicates that provided questions are required before joining. Expects true or false values"
        },
        "remove_topics": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of topic ids to disassociate with group"
        },
        "visibility": {
          "location": "query",
          "required": false,
          "description": "Restricts group visibility for non-members. May be one of 'public', 'public_limited' or 'members'. Note, the 'members' option is only available to groups that already have 'members' visibility"
        },
        "welcome_message": {
          "location": "query",
          "required": false,
          "description": "Message sent to members after they join. Can be at most 2000 characters"
        },
        "who": {
          "location": "query",
          "required": false,
          "description": "What members of the group will be called. Can be at most 32 characters"
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "The ZIP code of the city"
        },
        "{service}_uri": {
          "location": "query",
          "required": false,
          "description": "A URI for a social network service. Service must be one of facebook, flickr, linkedin, other, tumblr, twitter"
        }
      },
      "summary": "Allows organizers to edit their Meetup group information. To change group topics, see the add and remove topics endpoints. To change group photo use the Group photo upload endpoint. OAuth authenticated requests require an additional group_edit permission.",
      "uri": "{urlname}",
      "notes": null
    },
    "Similargroups": {
      "version": "3",
      "name": "Similargroups",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Renders a list of similar groups",
      "uri": "{urlname}/similar_groups",
      "notes": "The :urlname path element may be any valid group urlname or domain name."
    },
    "GroupTopicsAdd": {
      "version": "3",
      "name": "GroupTopicsAdd",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "topic_id": {
          "location": "query",
          "required": true,
          "description": "Comma-delimited list of topic ids to associate with group"
        }
      },
      "summary": "Associates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional group_edit permission.",
      "uri": "{urlname}/topics",
      "notes": null
    },
    "GroupTopicsRemove": {
      "version": "3",
      "name": "GroupTopicsRemove",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "topic_id": {
          "location": "query",
          "required": true,
          "description": "Comma-delimited list of topic ids to disassociate with group"
        }
      },
      "summary": "Disassociates topics with a given Meetup group. Limited to organizers of the group. OAuth authenticated requests require an additional group_edit permission.",
      "uri": "{urlname}/topics",
      "notes": null
    },
    "FindGroups": {
      "version": "3",
      "name": "FindGroups",
      "httpMethod": "GET",
      "parameters": {
        "category": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of numeric category ids"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "A valid two character country code, defaults to US"
        },
        "fallback_suggestions": {
          "location": "query",
          "required": false,
          "description": "boolean indicator of whether or not to return a list of curated suggestions for groups if we can't find groups matching your criteria"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "Request that additional fields (separated by commas) be included in the output."
        },
        "filter": {
          "location": "query",
          "required": false,
          "description": "Determines which groups are returned. If 'all' (default), the text and category parameters are applied. If 'friends', groups your friends are in are returned. The value of this parameter may be one of all, friends"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Approximate latitude"
        },
        "location": {
          "location": "query",
          "required": false,
          "description": "Raw text location query"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Approximate longitude"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
        },
        "self_groups": {
          "location": "query",
          "required": false,
          "description": "set to 'include' or 'exclude' Meetups the authorized member belongs to; default is 'include'"
        },
        "text": {
          "location": "query",
          "required": false,
          "description": "Raw full text search query"
        },
        "topic_id": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of numeric topic ids"
        },
        "upcoming_events": {
          "location": "query",
          "required": false,
          "description": "If true, filters text and category based searches on groups that have upcoming events. Defaults to false"
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "Zipcode of location to limit search to"
        },
        "distance": {
          "location": "query",
          "required": false,
          "description": "Order by distance"
        },
        "members": {
          "location": "query",
          "required": false,
          "description": "Order by number of members"
        },
        "most_active": {
          "location": "query",
          "required": false,
          "description": "Order by group with most active members"
        },
        "newest": {
          "location": "query",
          "required": false,
          "description": "Order by date group was founded"
        }
      },
      "summary": "Text, location, category and friend-based group searches",
      "uri": "find/groups",
      "notes": "All parameters are optional. If you do not supply some explicit form of location, the results will be based on your registered Meetup profile location, falling back on your IP's geographic location. If we can't find find Meetup groups matching your criteria you may optionally request that a small set of suggestions are returned in their place. To do so, send a request parameter named fallback_suggestions set to true. You can infer that a list of Meetup groups return are fallback suggestions when the X-Total-Count pagination response header has a 0 value. See the 'filter' parameter for more information controlling the results returned. Ordering does not apply to friend-filtered queries."
    },
    "RecommendedGroups": {
      "version": "3",
      "name": "RecommendedGroups",
      "httpMethod": "GET",
      "parameters": {
        "category": {
          "location": "query",
          "required": false,
          "description": "A valid category id which limits recommended groups to a particular category"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "A valid two character country code, defaults to US"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "Request that additional fields (separated by commas) be included in the output."
        },
        "instant_join_only": {
          "location": "query",
          "required": false,
          "description": "Recommend only groups without join requirements and that can be joined instantly"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Approximate latitude"
        },
        "location": {
          "location": "query",
          "required": false,
          "description": "Raw text location query"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Approximate longitude"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "Radius in miles. May be 0.0-100.0, 'global' or 'smart', a dynamic radius based on the number of active groups in the area. Defaults to member's preferred radius"
        },
        "sort": {
          "location": "query",
          "required": false,
          "description": "How to order the results. Valid values are \"default\" or \"static\"."
        },
        "topic_id": {
          "location": "query",
          "required": false,
          "description": "Comma delimited list of up to 100 topic ids to help inform recommendations"
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "Zip code you are searching for recommendations in"
        }
      },
      "summary": "Returns groups Meetup finds relevant to you",
      "uri": "recommended/groups",
      "notes": "All parameters are optional. You may change the 'location' and 'radius' for the request. If you do not supply a location your request will be based on your IP's geographic location. If the server is unable to produce recommendations in a suitable amount of time, a 503 error will be returned."
    },
    "RecommendedGroupsIgnore": {
      "version": "3",
      "name": "RecommendedGroupsIgnore",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Provides a form of feedback by requesting to remove a group from future recommendations",
      "uri": "recommended/groups/ignores/{urlname}",
      "notes": "Only the path parameter :urlname is required. You are limited to 100 of these requests in a 24 hour period of time."
    },
    "Membergroups": {
      "version": "3",
      "name": "Membergroups",
      "httpMethod": "GET",
      "parameters": {
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of groups to return in a single page of results. By default, this is 200"
        }
      },
      "summary": "Lists the authenticated member's groups in the order of leadership,next upcoming event, then alphabetical order by name",
      "uri": "self/groups",
      "notes": "This endpoint uses HTTP Link header based pagination."
    },
    "EventHosts": {
      "version": "3",
      "name": "EventHosts",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        }
      },
      "summary": "Returns the list of hosts for a given event",
      "uri": "{urlname}/events/{event_id}/hosts",
      "notes": "A valid :urlname and :event_id is required."
    },
    "APIStatus": {
      "version": "3",
      "name": "APIStatus",
      "httpMethod": "GET",
      "parameters": {},
      "summary": "Returns the current API service status",
      "uri": "status",
      "notes": "No parameters are needed"
    },
    "Notifications": {
      "version": "3",
      "name": "Notifications",
      "httpMethod": "GET",
      "parameters": {
        "fields": {
          "location": "query",
          "required": false,
          "description": "Request that additional fields (separated by commas) be included in the output."
        }
      },
      "summary": "Returns all recent Meetup notifications for the authorized member. To mark notifications read use /notifications/read endpoint. To get the authenticated Member's current unread count, request it in an HTTP header.",
      "uri": "notifications",
      "notes": "No parameters are required"
    },
    "ClickedNotifications": {
      "version": "3",
      "name": "ClickedNotifications",
      "httpMethod": "POST",
      "parameters": {
        "notif_id": {
          "location": "query",
          "required": false,
          "description": "The id of the notification to set as clicked"
        }
      },
      "summary": "Marks groups of notifications as clicked.",
      "uri": "notifications/clicked",
      "notes": ""
    },
    "ReadNotifications": {
      "version": "3",
      "name": "ReadNotifications",
      "httpMethod": "POST",
      "parameters": {
        "fields": {
          "location": "query",
          "required": false,
          "description": "Request that additional fields (separated by commas) be included in the output."
        },
        "since_id": {
          "location": "query",
          "required": false,
          "description": "The id of the newest notification item, typically the first in the list returned by the notifications endpoint"
        }
      },
      "summary": "Marks groups of notifications as read.",
      "uri": "notifications/read",
      "notes": ""
    },
    "EventPhotos": {
      "version": "3",
      "name": "EventPhotos",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Controls directional order or listing. Default false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"comment_count\", \"self\" and \"short_link\""
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of items to return per-page of results. Defaults to 200"
        }
      },
      "summary": "Lists photos for a given event",
      "uri": "{urlname}/events/{event_id}/photos",
      "notes": null
    },
    "EventPhotoUpload": {
      "version": "3",
      "name": "EventPhotoUpload",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "await": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received."
        },
        "caption": {
          "location": "query",
          "required": false,
          "description": "Caption for display. Max length 255"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"self\" and \"comment_count\""
        },
        "photo": {
          "location": "query",
          "required": true,
          "description": "Photo upload data, encoded as multipart/form-data. The maximum file size allowed is 10MB"
        }
      },
      "summary": "Support for uploading new Event photos",
      "uri": "{urlname}/events/{event_id}/photos",
      "notes": null
    },
    "EventPhoto": {
      "version": "3",
      "name": "EventPhoto",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"comment_count\", \"self\" and \"short_link\""
        }
      },
      "summary": "Gets information about a specific photo",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}",
      "notes": null
    },
    "EventPhotoEdit": {
      "version": "3",
      "name": "EventPhotoEdit",
      "httpMethod": "PATCH",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "caption": {
          "location": "query",
          "required": false,
          "description": "The photo caption. May be up to 255 characters. To remove a caption, just send an empty value"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"comment_count\", \"self\" and \"short_link\""
        }
      },
      "summary": "Edits photo details",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}",
      "notes": null
    },
    "EventPhotoDelete": {
      "version": "3",
      "name": "EventPhotoDelete",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Deletes a specified event photo",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}",
      "notes": null
    },
    "PhotoComments": {
      "version": "3",
      "name": "PhotoComments",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Lists photo comments associated with a photo",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}/comments",
      "notes": null
    },
    "PhotoComment": {
      "version": "3",
      "name": "PhotoComment",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment": {
          "location": "query",
          "required": true,
          "description": "The text of the comment"
        }
      },
      "summary": "Creates a new photo comment",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}/comments",
      "notes": null
    },
    "PhotoCommentDelete": {
      "version": "3",
      "name": "PhotoCommentDelete",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "comment_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Deletes photo comments",
      "uri": "{urlname}/events/{event_id}/photos/{photo_id}/comments/{comment_id}",
      "notes": null
    },
    "PhotoAlbumList": {
      "version": "3",
      "name": "PhotoAlbumList",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"self\" and \"short_link\""
        },
        "offset": {
          "location": "query",
          "required": false,
          "description": "Incrementing number used for pagination offsets"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of albums to return per page of results"
        }
      },
      "summary": "Gets a list a group photo albums in ascending order based on the time they were created",
      "uri": "{urlname}/photo_albums",
      "notes": "A valid path parameter value for :urlname is required This endpoint uses HTTP Link header based pagination."
    },
    "PhotoAlbum": {
      "version": "3",
      "name": "PhotoAlbum",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "album_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"self\" and \"short_link\""
        }
      },
      "summary": "Gets information about a specific photo album",
      "uri": "{urlname}/photo_albums/{album_id}",
      "notes": "A valid path parameter value for :urlname and :album_id is required"
    },
    "AlbumPhotos": {
      "version": "3",
      "name": "AlbumPhotos",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "album_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Controls directional order or listing. Default false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"comment_count\", \"self\" and \"short_link\""
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of items to return per-page of results. Defaults to 200"
        }
      },
      "summary": "Lists photos for a given photo album",
      "uri": "{urlname}/photo_albums/{album_id}/photos",
      "notes": null
    },
    "AlbumPhotoUpload": {
      "version": "3",
      "name": "AlbumPhotoUpload",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "album_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "await": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that will defer a request's a response until confirmation that photo is immediately displayable is received."
        },
        "caption": {
          "location": "query",
          "required": false,
          "description": "Caption for display. Max length 255"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"self\" and \"comment_count\""
        },
        "photo": {
          "location": "query",
          "required": true,
          "description": "Photo upload data, encoded as multipart/form-data. The maximum file size allowed is 10MB"
        }
      },
      "summary": "Support for uploading new Album photos",
      "uri": "{urlname}/photo_albums/{album_id}/photos",
      "notes": null
    },
    "AlbumPhotosGroup": {
      "version": "3",
      "name": "AlbumPhotosGroup",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Controls directional order or listing. Default false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional response fields. Currently supported values are \"comment_count\", \"self\" and \"short_link\""
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of items to return per-page of results. Defaults to 200"
        }
      },
      "summary": "Lists of all photos uploaded for the group",
      "uri": "{urlname}/photos",
      "notes": null
    },
    "MemberPhotoUpload": {
      "version": "3",
      "name": "MemberPhotoUpload",
      "httpMethod": "POST",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "await": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that, when set to true, will defer a request's a response until confirmation that photo is immediately displayable is received."
        },
        "main": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that, when set to true, will cause the member's main profile photo to be set to the uploaded photo"
        },
        "photo": {
          "location": "query",
          "required": true,
          "description": "Photo upload data, encoded as a multipart/form-data file. The maximum file size allowed is 10MB"
        },
        "sync_photo": {
          "location": "query",
          "required": false,
          "description": "Optional boolean parameter that, when set to true, will sync all of the group profile photos for the member with the provided photo"
        }
      },
      "summary": "Support for uploading new Member photos",
      "uri": "members/{member_id}/photos",
      "notes": null
    },
    "MemberPhotoDelete": {
      "version": "3",
      "name": "MemberPhotoDelete",
      "httpMethod": "DELETE",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "photo_id": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Deletes a member photo by id",
      "uri": "members/{member_id}/photos/{photo_id}",
      "notes": null
    },
    "Getpreferenceandpermissiondata": {
      "version": "3",
      "name": "Getpreferenceandpermissiondata",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "domain": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Returns preference and permission data for the specified product domain",
      "uri": "{urlname}/preferences/{domain}",
      "notes": ":urlname and :domain path parameters are required. :domain specifies the preference domain and must be one of: group_discussions."
    },
    "Updateapreference": {
      "version": "3",
      "name": "Updateapreference",
      "httpMethod": "PATCH",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "domain": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "Updates the specified preference for the specified product domain",
      "uri": "{urlname}/preferences/{domain}",
      "notes": ":urlname and :domain path parameters are required. :domain specifies the preference domain and must be one of: group_discussions. The name of the preference to update is a required query string parameter. For the group_discussions domain, the only supported preference name is any_member_can_post"
    },
    "SearchProGroups": {
      "version": "3",
      "name": "SearchProGroups",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "active_within_days": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: including only those groups that had event in the last specified days"
        },
        "average_age_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the average age of the members"
        },
        "average_age_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the average age of the members"
        },
        "category": {
          "location": "query",
          "required": false,
          "description": "List of Integers: the ids of the category of the group"
        },
        "chapter_urlname": {
          "location": "query",
          "required": false,
          "description": "List of String: the urlnames of chapters that may belong to the organization"
        },
        "chapters": {
          "location": "query",
          "required": false,
          "description": "List of Integer: the chapter ids that may belong to the organization"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "String: Country"
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "List of Boolean: whether to sort ascending or decending on each attributes in order"
        },
        "excluded_chapters": {
          "location": "query",
          "required": false,
          "description": "List of Integer: the chapters to exclude from the result"
        },
        "founded_date_max": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Maximum range of the founded dates of the groups"
        },
        "founded_date_min": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Minumum range of the founded dates of the groups"
        },
        "inactive_within_days": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: including only those groups that did not have event in the last specified days"
        },
        "last_event_max": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Maximum range of the date that the last meetup happened"
        },
        "last_event_min": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Minumum range of the date that the last meetup happened"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Float: Latitude"
        },
        "location": {
          "location": "query",
          "required": false,
          "description": "String: Raw location"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Float: Longitude"
        },
        "member_count_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the number of members"
        },
        "member_count_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minimum range of the number of members"
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "By the name of the groups"
        },
        "next_event_max": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Maximum range of the date that the next meetup is scheduled"
        },
        "next_event_min": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Minumum range of the date that the next meetup is scheduled"
        },
        "offset": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: the page offset"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "List of String: attributes to sort on"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: the size of page window"
        },
        "past_events_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the number of the past events held"
        },
        "past_events_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the number of the past events held"
        },
        "past_rsvps_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the total number of past RSVPs"
        },
        "past_rsvps_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the total number of past RSVPs"
        },
        "pro_join_date_max": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Maximum range of the dates the groups joined Pro organization"
        },
        "pro_join_date_min": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: Minumum range of the dates the groups joined Pro organization"
        },
        "query": {
          "location": "query",
          "required": false,
          "description": "String: raw query to search from group name, description, leadership member name, or city"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "String: global, smart, or search radius in Float"
        },
        "repeat_rsvpers_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the average number of repeat rsvpers"
        },
        "repeat_rsvpers_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the average number of repeat rsvpers"
        },
        "rsvps_per_event_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the average number of RSVPs per event"
        },
        "rsvps_per_event_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the average number of RSVPs per event"
        },
        "topics": {
          "location": "query",
          "required": false,
          "description": "List of Integers: the ids of topic of the group"
        },
        "upcoming_events_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum range of the number of the upcoming events"
        },
        "upcoming_events_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minumum range of the number of the upcoming events"
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "String: Zip code"
        },
        "average_age": {
          "location": "query",
          "required": false,
          "description": "By the average age of members"
        },
        "founded_date": {
          "location": "query",
          "required": false,
          "description": "By the founded date of the group"
        },
        "gender_female": {
          "location": "query",
          "required": false,
          "description": "By the proportion of people who identify themselves as female"
        },
        "gender_male": {
          "location": "query",
          "required": false,
          "description": "By the proportion of people who identify themselves as male"
        },
        "gender_other": {
          "location": "query",
          "required": false,
          "description": "By the proportion of people who identify themselves as gender other than female or male"
        },
        "gender_unknown": {
          "location": "query",
          "required": false,
          "description": "By the proportion of people whose gender info is unknown"
        },
        "last_event": {
          "location": "query",
          "required": false,
          "description": "By the date of the last event happened"
        },
        "member_count": {
          "location": "query",
          "required": false,
          "description": "By the number of members"
        },
        "next_event": {
          "location": "query",
          "required": false,
          "description": "By the date of the next event scheduled"
        },
        "past_events": {
          "location": "query",
          "required": false,
          "description": "By the number of past meetups held"
        },
        "past_rsvps": {
          "location": "query",
          "required": false,
          "description": "By the total number of past RSVPs"
        },
        "pro_join_date": {
          "location": "query",
          "required": false,
          "description": "By the date the group joined the Pro org"
        },
        "repeat_rsvpers": {
          "location": "query",
          "required": false,
          "description": "By the number of members RSVPing subsequent events"
        },
        "rsvps_per_event": {
          "location": "query",
          "required": false,
          "description": "By the average number of RSVPs per event"
        }
      },
      "summary": "Name and statistics range search for the meetup groups belonging to Pro organization.",
      "uri": "pro/{urlname}/groups",
      "notes": "All parameters are optional. order and desc can take multiple items in a comma-delimited list."
    },
    "SearchProMembers": {
      "version": "3",
      "name": "SearchProMembers",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "active_within_days": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: The range of date from the past until today, for the recent activity"
        },
        "chapters": {
          "location": "query",
          "required": false,
          "description": "List of Integers: The chapters which the member belongs to"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "String: Country"
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Boolean: whether to sort ascending or decending"
        },
        "email_received": {
          "location": "query",
          "required": false,
          "description": "Integers: The id of a previous emails that the member received"
        },
        "events_attended_max": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Maximum number of attended events"
        },
        "events_attended_min": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: Minimum number of attended events"
        },
        "is_organizer": {
          "location": "query",
          "required": false,
          "description": "By whether the member is an organizer or not"
        },
        "join_time_max": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: The latest time limit for member join"
        },
        "join_time_min": {
          "location": "query",
          "required": false,
          "description": "Milliseconds since epoch: The oldest time limit for member join"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "Float: Latitude"
        },
        "location": {
          "location": "query",
          "required": false,
          "description": "String: Raw location"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "Float: Longitude"
        },
        "member_name": {
          "location": "query",
          "required": false,
          "description": "By the member name"
        },
        "offset": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: the page offset"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "String: attribute to sort on"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Positive Integer: the size of page window"
        },
        "query": {
          "location": "query",
          "required": false,
          "description": "String: raw query string to search from member name or city"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "String: global, smart, or search radius in Float"
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "String: Zip code"
        },
        "events_attended": {
          "location": "query",
          "required": false,
          "description": "By the number of events attended"
        },
        "join_time": {
          "location": "query",
          "required": false,
          "description": "By the time when the member joined Meetup"
        },
        "last_access_time": {
          "location": "query",
          "required": false,
          "description": "By the time of most recent visit"
        }
      },
      "summary": "Name, location, and time based search for the members of the meetups belonging to Pro organization.",
      "uri": "pro/{urlname}/members",
      "notes": "All parameters are optional."
    },
    "GetProNetworkRSVPs": {
      "version": "3",
      "name": "GetProNetworkRSVPs",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "offset": {
          "location": "query",
          "required": false,
          "description": "Integer: offset of page, starting from 0"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Integer: size of page. Minimum of 1 and maximum of 200"
        }
      },
      "summary": "Get the list of RSVP responses for the events across the entire Pro network",
      "uri": "pro/{urlname}/rsvps",
      "notes": ""
    },
    "SearchIssuedProTickets": {
      "version": "3",
      "name": "SearchIssuedProTickets",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "chapter_name": {
          "location": "query",
          "required": false,
          "description": "By the name of the chapter that redeemed the ticket"
        },
        "chapters": {
          "location": "query",
          "required": false,
          "description": "Comma delimited positive integers: ids of redeemed chapters"
        },
        "country": {
          "location": "query",
          "required": false,
          "description": "String: two-letter country code of the redeemed chapters"
        },
        "status": {
          "location": "query",
          "required": false,
          "description": "By the redeemed status of the ticket"
        },
        "ticket_key": {
          "location": "query",
          "required": false,
          "description": "String: full matching string of an issued ticket key"
        },
        "created": {
          "location": "query",
          "required": false,
          "description": "By the creation timestamp of ticket"
        },
        "updated": {
          "location": "query",
          "required": false,
          "description": "By the update timestamp of ticket"
        }
      },
      "summary": "Redeemed chapter, redeemed member, status, and timestamp for tickets belonging to Pro organization.",
      "uri": "pro/{urlname}/tickets",
      "notes": "All parameters are optional."
    },
    "MembershipApproval": {
      "version": "3",
      "name": "MembershipApproval",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "member": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited numeric pending member IDs. The maximum allowed is 200"
        },
        "send_copy": {
          "location": "query",
          "required": false,
          "description": "Optional boolean value indicating whether or not the org should receive a copy of the message sent to the approved members"
        },
        "welcome_message": {
          "location": "query",
          "required": false,
          "description": "Optional message to send to the members being approved. If not provided, the groups default welcome message will be sent. Max message size is 2000"
        }
      },
      "summary": "Approves one or more requests for group membership",
      "uri": "{urlname}/member/approvals",
      "notes": null
    },
    "MembershipDecline": {
      "version": "3",
      "name": "MembershipDecline",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "anon": {
          "location": "query",
          "required": false,
          "description": "Optional Boolean value indicating whether the declining member's email address should be hidden in the resulting response. Default is true."
        },
        "ban": {
          "location": "query",
          "required": false,
          "description": "Optional Boolean value indicating whether or not to ban the member in the future. Default is false"
        },
        "explanation": {
          "location": "query",
          "required": false,
          "description": "Optional explanation to send to the members being declined. Max message size is 2000"
        },
        "member": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited numeric pending member IDs. The maximum allowed is 200"
        },
        "send_copy": {
          "location": "query",
          "required": false,
          "description": "Optional Boolean value indicating whether or not to send a copy to the member issuing the decline. Default is false"
        }
      },
      "summary": "Declines one or more requests for group membership",
      "uri": "{urlname}/member/approvals",
      "notes": null
    },
    "GroupProfilelist": {
      "version": "3",
      "name": "GroupProfilelist",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Boolean value controling sort order of results. Currently this parameter is only supported for \"joined\" and \"name\" sorted results. Defaults to true"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        },
        "filter": {
          "location": "query",
          "required": false,
          "description": "May be set to 'stepup_eligible' to return only members eligible to step up as organizer"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "Orders results according to definitions listed below. May be one of \"interesting\", \"name\", \"joined\", or \"stepup_recommended\""
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of requested members to return. Defaults to 200"
        },
        "role": {
          "location": "query",
          "required": false,
          "description": "May be set to \"leads\" to filter returned members on the lead team"
        },
        "status": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of member statuses. Valid values include \"active\" or \"pending\". Defaults to \"active\". Organizers may request pending"
        },
        "interesting": {
          "location": "query",
          "required": false,
          "description": "Order which may be interesting to the authorized member"
        },
        "joined": {
          "location": "query",
          "required": false,
          "description": "Time member joined this group"
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "The name of the member"
        },
        "stepup_recommended": {
          "location": "query",
          "required": false,
          "description": "Sorts by likelikhood to step up as organizer"
        }
      },
      "summary": "Get a list of Meetup group members",
      "uri": "{urlname}/members",
      "notes": null
    },
    "GroupJoin": {
      "version": "3",
      "name": "GroupJoin",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        }
      },
      "summary": "This method allows an authenticated member to join a group by creating a profile",
      "uri": "{urlname}/members",
      "notes": null
    },
    "GetGroupMemberProfile": {
      "version": "3",
      "name": "GetGroupMemberProfile",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited string of optional response field names. This may include birthday, gender, groups, privacy, self and topics"
        }
      },
      "summary": "Gets Group Profiles.For Member Profiles, see this endpoint",
      "uri": "{urlname}/members/{member_id}",
      "notes": null
    },
    "EditGroupMemberProfile": {
      "version": "3",
      "name": "EditGroupMemberProfile",
      "httpMethod": "PATCH",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "add_role": {
          "location": "query",
          "required": false,
          "description": "Allows those with permission to assign one of the following roles: \"assistant_organizer\", \"coorganizer\", or \"event_organizer\""
        },
        "answer_{qid}": {
          "location": "query",
          "required": false,
          "description": "Answers to questions from group's API join_info question fields."
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited string of optional response field names. This may include birthday, gender, groups, privacy, self and topics"
        },
        "intro": {
          "location": "query",
          "required": false,
          "description": "Provides a Member an opportunity to tell the group about themselves, in at most 255 characters"
        },
        "photo_id": {
          "location": "query",
          "required": false,
          "description": "Numeric id of the photo to use for this profile. Send a value of 0 to unset the current photo"
        },
        "remove_role": {
          "location": "query",
          "required": false,
          "description": "Allows those with permission to remove one of the following roles: \"assistant_organizer\", \"coorganizer\", or \"event_organizer\""
        },
        "title": {
          "location": "query",
          "required": false,
          "description": "An organizer-defined title, in at most 255 characters"
        }
      },
      "summary": "Edits Group Profiles.To fetch Group Member Profiles,see this endpoint",
      "uri": "{urlname}/members/{member_id}",
      "notes": null
    },
    "DeleteGroupMemberProfile(LeaveGroup)": {
      "version": "3",
      "name": "DeleteGroupMemberProfile(LeaveGroup)",
      "httpMethod": "DELETE",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "exit_comment": {
          "location": "query",
          "required": false,
          "description": "Optional message to the organizer when leaving"
        }
      },
      "summary": "Deletes a member's group profiles.",
      "uri": "{urlname}/members/{member_id}",
      "notes": null
    },
    "GroupProfilesearch": {
      "version": "3",
      "name": "GroupProfilesearch",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "Orders results according to definitions listed below. May be one of \"name\" or \"closest_match\""
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of requested members to return. Defaults to 50"
        },
        "query": {
          "location": "query",
          "required": true,
          "description": "The name to search for"
        },
        "closest_match": {
          "location": "query",
          "required": false,
          "description": "Ordered by closest match to the provided query"
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "Orded by the name of the member"
        }
      },
      "summary": "Find group member profiles by name.Member's who very recently joined or left the group may not be immediately searchable",
      "uri": "find/{urlname}/members",
      "notes": "A valid :urlname path parameter is required This endpoint uses HTTP Link header based pagination."
    },
    "GetMemberProfile": {
      "version": "3",
      "name": "GetMemberProfile",
      "httpMethod": "GET",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited string of optional response field names. This may include groups, privacy, and topics"
        }
      },
      "summary": "Gets Member Profiles.For Group Profiles, see this endpoint",
      "uri": "members/{member_id}",
      "notes": null
    },
    "MemberProfileEdit": {
      "version": "3",
      "name": "MemberProfileEdit",
      "httpMethod": "PATCH",
      "parameters": {
        "member_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "add_topics": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of topic ids to add to members interest list"
        },
        "bio": {
          "location": "query",
          "required": false,
          "description": "Member bio of up to 250 characters"
        },
        "bio_privacy": {
          "location": "query",
          "required": false,
          "description": "Preference for hiding or showing member bio to others. Value may be one of \"hidden\" or \"visible\""
        },
        "birthday": {
          "location": "query",
          "required": false,
          "description": "Member's date or year of birth. May be specified in one of the following formats. yyyy, mmddyyy or alternatively -1, which indicates that birthday data should be cleared"
        },
        "city_id": {
          "location": "query",
          "required": false,
          "description": "Valid Meetup city identifier that indicates the city in which the member resides"
        },
        "facebook_privacy": {
          "location": "query",
          "required": false,
          "description": "Preference for hiding showing information member's facebook connection. Value may be one of \"hidden\" or \"visible\" or absent if facebook is not connected"
        },
        "gender": {
          "location": "query",
          "required": false,
          "description": "Member's gender. Value may be one of \"female\", \"male\", \"none\", or \"other\""
        },
        "groups_privacy": {
          "location": "query",
          "required": false,
          "description": "Preference for hiding or showing group memberships to others. Value may be one of \"hidden\" or \"visible\""
        },
        "lang": {
          "location": "query",
          "required": false,
          "description": "Member's language preference. Value may be one of \"de-DE\", \"en-AU\", \"en-US\", \"es\", \"es-ES\", \"fr-FR\", \"it-IT\", \"ja-JP\", \"ko-KR\", \"nl-NL\", \"pl-PL\", \"pt-BR\", \"ru-RU\", \"sv-SE\", \"th-TH\", or \"tr-TR\""
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "A valid latitude to resolve the closest location to associate with the member. This parameter must be accompanied by \"lon\" and \"zip\""
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "A valid longitude to resolve the closest location to associate with the member This parameter must be accompanied by \"lat\" and \"zip\""
        },
        "messaging_pref": {
          "location": "query",
          "required": false,
          "description": "Preference for which members may contact you via the Meetup platform. Value may be one of \"all_members\", \"groups_only\", or \"orgs_only\""
        },
        "name": {
          "location": "query",
          "required": false,
          "description": "Member name"
        },
        "photo_id": {
          "location": "query",
          "required": false,
          "description": "A valid photo id to this member has previously updated to use as profile photo"
        },
        "remove_topics": {
          "location": "query",
          "required": false,
          "description": "Comma-delimited list of topic ids to remove from members interest list"
        },
        "sync_photo": {
          "location": "query",
          "required": false,
          "description": "When set to true, this parameter will sync all the group profile photos for the member with the provided photo_id"
        },
        "topics_privacy": {
          "location": "query",
          "required": false,
          "description": "Preference for hiding or showing member interests to others. Value may be one of \"hidden\" or \"visible\""
        },
        "zip": {
          "location": "query",
          "required": false,
          "description": "A valid zip code to associate with the member. This parameter must be accompanied by \"lat\" and \"lon\""
        }
      },
      "summary": "",
      "uri": "members/{member_id}",
      "notes": null
    },
    "EventRSVPlist": {
      "version": "3",
      "name": "EventRSVPlist",
      "httpMethod": "GET",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "desc": {
          "location": "query",
          "required": false,
          "description": "Boolean value controling sort order of results. Defaults to false"
        },
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of optional fields to append to the response"
        },
        "order": {
          "location": "query",
          "required": false,
          "description": "The sort order of returned RSVPs. Valid values include \"name\", \"social\", or \"time\". Defaults to \"name\""
        },
        "response": {
          "location": "query",
          "required": false,
          "description": "Filter returned list to one or more of the following RSVP responses. \"yes\" or \"no\". This defaults to \"yes,no\""
        }
      },
      "summary": "Retrieves list of event RSVPs",
      "uri": "{urlname}/events/{event_id}/rsvps",
      "notes": null
    },
    "RSVPCreateandUpdate": {
      "version": "3",
      "name": "RSVPCreateandUpdate",
      "httpMethod": "POST",
      "parameters": {
        "urlname": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "event_id": {
          "location": "uri",
          "required": true,
          "description": null
        },
        "agree_to_refund": {
          "location": "query",
          "required": false,
          "description": "A boolean indicator used for Events with ticketing feeds to imply the Member has agreed to the Event's refund policy"
        },
        "answer_{qid}": {
          "location": "query",
          "required": false,
          "description": "Answers to Event survey questions. Parameter names should have a suffix specifying the question's identifier. Answers may not be longer than 250 characters."
        },
        "guests": {
          "location": "query",
          "required": false,
          "description": "The number of guests Member will be attending with. Events may define guest limits which is 2 by default"
        },
        "opt_to_pay": {
          "location": "query",
          "required": false,
          "description": "A boolean indicator used for Events with ticketing fees to imply the Member has opted to pay as part of the RSVP request"
        },
        "pro_email_share_optin": {
          "location": "query",
          "required": false,
          "description": "The authenticated Member's email opt in status. Supported values are either \"true\" or \"false\""
        },
        "response": {
          "location": "query",
          "required": true,
          "description": "The authenticated Member's RSVP response. Supported values are either \"yes\" or \"no\""
        }
      },
      "summary": "Creates or updates an existing RSVP",
      "uri": "{urlname}/events/{event_id}/rsvps",
      "notes": "The RSVP with be attributed to the currently authenticated member. Organizers may define a set of survey questions they intend members to answer when RSVPing. Members RSVPing may provide answers to those questions by supplying parameter names that correspond with question identifiers. To resolve any defined survey questions, you can inspect the Event Get's response body for the 'survey_questions' field If the Event requires payment, you are required to send an 'agree_to_refund' parameter set to true. This represents the authenticated Member's agreement to understanding the Event's refund policy. Note: When space is not available, \"yes\" responses may be coerced into a waitlist response. This indicates that the authenticated member has expressed interest in attending when space becomes available. OAuth authenticated applications should request the rsvp permission scope"
    },
    "TopicCategories": {
      "version": "3",
      "name": "TopicCategories",
      "httpMethod": "GET",
      "parameters": {
        "fields": {
          "location": "query",
          "required": false,
          "description": "A comma-limited list of optional fields to append to the response"
        },
        "lat": {
          "location": "query",
          "required": false,
          "description": "An optional approximate latitude to center a request for \"best_topics\". When not provided, lat associated with member is used"
        },
        "lon": {
          "location": "query",
          "required": false,
          "description": "An optional approximate longitude to center a request for \"best_topics\". When not provided, lon associated with member is used"
        },
        "radius": {
          "location": "query",
          "required": false,
          "description": "An radius (in miles) to center a request for \"best_topics\". When not provided, the members default alert radius is used"
        }
      },
      "summary": "Returns a list high level topic categories",
      "uri": "find/topic_categories",
      "notes": "No parameters are required. Authenticated members may request \"best_topics\" using the \"fields\" request parameter. By default these topics will selected based on groups in the member's location. Alternatively you may supply a \"lat\", \"lon\", and \"radius\" to center these topic suggestions"
    },
    "FindTopics": {
      "version": "3",
      "name": "FindTopics",
      "httpMethod": "GET",
      "parameters": {
        "page": {
          "location": "query",
          "required": false,
          "description": "Number of results to return in a single set of results"
        },
        "query": {
          "location": "query",
          "required": true,
          "description": "The text to topic text search for"
        }
      },
      "summary": "Find topics by name",
      "uri": "find/topics",
      "notes": "This endpoint uses HTTP Link header based pagination."
    },
    "RecommendGroupTopics": {
      "version": "3",
      "name": "RecommendGroupTopics",
      "httpMethod": "GET",
      "parameters": {
        "exclude_topics": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of topic ids to exclude from the recommendations"
        },
        "lang": {
          "location": "query",
          "required": false,
          "description": "Defines a language preference for ordering results. Valid values are en-USen-AUde-DEeses-ESfr-FRit-ITpt-BRja-JPnl-NLko-KRpl-PLth-THtr-TRru-RUsv-SEpt-brpl-plit-itsv-seja-jpen-auru-rude-deen-usth-thtr-tres-esnl-nlfr-frko-krendefritptjanlkoplthtrrusv. You may also substitute this with the Accept-Language header"
        },
        "other_topics": {
          "location": "query",
          "required": false,
          "description": "A comma-delimited list of topic ids to inform recommendations"
        },
        "page": {
          "location": "query",
          "required": false,
          "description": "Target number of recommendations to return. Defaults to 36."
        },
        "text": {
          "location": "query",
          "required": false,
          "description": "Free form text search"
        }
      },
      "summary": "Recommends suggestions for group topics based on a text search or other topics",
      "uri": "recommended/group_topics",
      "notes": ""
    }
  }
}